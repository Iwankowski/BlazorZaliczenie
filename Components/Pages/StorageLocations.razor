@page "/storage-locations"
@using BlazorApp2_Iwankowski.Data
@using BlazorApp2_Iwankowski.Services
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer
@inject StorageLocationService StorageLocationService
@inject NavigationManager Navigation

<div class="container-fluid mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Magazyny</h5>
            <button class="btn btn-light btn-sm" @onclick="() => ShowAddEditDialog()">
                <i class="bi bi-plus-circle"></i> Dodaj magazyn
            </button>
        </div>
        <div class="card-body">
            @if (locations == null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">£adowanie...</span>
                    </div>
                </div>
            }
            else if (!locations.Any())
            {
                <div class="alert alert-info">
                    Brak zdefiniowanych magazynów.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Nazwa</th>
                                <th>Liczba produktów</th>
                                <th>Akcje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var location in locations)
                            {
                                <tr>
                                    <td>@location.Name</td>
                                    <td>@(location.Items?.Count ?? 0)</td>
                                    <td>
                                        <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => ShowAddEditDialog(location)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowDeleteDialog(location)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@if (showDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingLocation?.Id > 0 ? "Edytuj" : "Dodaj") magazyn</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <EditForm Model="editingLocation" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="form-floating">
                            <InputText @bind-Value="editingLocation.Name" class="form-control" placeholder="Nazwa magazynu" />
                            <label>Nazwa magazynu</label>
                            <ValidationMessage For="@(() => editingLocation.Name)" class="text-danger small" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Anuluj</button>
                        <button type="submit" class="btn btn-primary">Zapisz</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDeleteDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">PotwierdŸ usuniêcie</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteDialog"></button>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz usun¹æ magazyn "@deletingLocation?.Name"?</p>
                    @if (deletingLocation?.Items?.Any() == true)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            Ten magazyn zawiera produkty. Po usuniêciu magazynu produkty nie bêd¹ mia³y przypisanej lokalizacji.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteDialog">Anuluj</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Usuñ</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<StorageLocation>? locations;
    private bool showDialog;
    private bool showDeleteDialog;
    private StorageLocation editingLocation = new();
    private StorageLocation? deletingLocation;

    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
    }

    private async Task LoadLocations()
    {
        locations = await StorageLocationService.GetAllAsync();
    }

    private void ShowAddEditDialog(StorageLocation? location = null)
    {
        editingLocation = location != null ? new StorageLocation { Id = location.Id, Name = location.Name } : new StorageLocation();
        showDialog = true;
    }

    private void ShowDeleteDialog(StorageLocation location)
    {
        deletingLocation = location;
        showDeleteDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
    }

    private void CloseDeleteDialog()
    {
        showDeleteDialog = false;
        deletingLocation = null;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (editingLocation.Id == 0)
                await StorageLocationService.AddAsync(editingLocation);
            else
                await StorageLocationService.UpdateAsync(editingLocation);

            await LoadLocations();
            showDialog = false;
        }
        catch (Exception)
        {
            // Obs³uga b³êdów
        }
    }

    private async Task ConfirmDelete()
    {
        if (deletingLocation != null)
        {
            await StorageLocationService.DeleteAsync(deletingLocation.Id);
            await LoadLocations();
            CloseDeleteDialog();
        }
    }
}